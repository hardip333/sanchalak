using MSUIS_TokenManager.App_Start;
using MSUISApi.Models;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.WebPages;

namespace MSUISApi.Controllers
{
    public class BranchChangeRequestController : ApiController
    {
        SqlConnection Con = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MSUISConnectionString"].ConnectionString);
        SqlDataAdapter Da = new SqlDataAdapter();
        DataTable Dt = new DataTable();
        Validation validation = new Validation();
        SqlTransaction ST;
        TimeZoneInfo INDIAN_ZONE = TimeZoneInfo.FindSystemTimeZoneById("India Standard Time");
        DateTime datetime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.Now.ToUniversalTime(), TimeZoneInfo.FindSystemTimeZoneById("India Standard Time"));

        #region Branch Change Request Get
        [HttpPost]
        public HttpResponseMessage BranchChangeRequestGet(BranchChange FCC)
        {
            try
            {
                String token = Request.Headers.GetValues("token").FirstOrDefault();
                String typePrefix = Request.Headers.GetValues("typePrefix").FirstOrDefault();
                String facultyDepartIntituteId = Request.Headers.GetValues("facultyDepartIntituteId").FirstOrDefault();
                String userRoleToken = Request.Headers.GetValues("userRoleToken").FirstOrDefault();
                TokenOperation ac = new TokenOperation();
                string res = ac.ValidateToken(token);
                string resRoleToken = ac.ValidateRoleToken(userRoleToken);

                if (res == "0")
                {
                    return Return.returnHttp("0", null, null);
                }
                else if (resRoleToken == "0")
                {
                    return Return.returnHttp("0", null, null);
                }

                if (typePrefix == "INS")
                {

                    Int64 ApplicationId = Convert.ToInt64(FCC.ApplicationId);

                    SqlCommand Cmd = new SqlCommand("AdmApplicationGetByIdForBranchChange", Con);
                    Cmd.CommandType = CommandType.StoredProcedure;

                    Cmd.Parameters.AddWithValue("@InstituteId", facultyDepartIntituteId);
                    Cmd.Parameters.AddWithValue("@ApplicationId", ApplicationId);

                    Da.SelectCommand = Cmd;
                    Da.Fill(Dt);

                    List<BranchChange> ObjLstFCC = new List<BranchChange>();

                    if (Dt.Rows.Count > 0)
                    {
                        for (int i = 0; i < Dt.Rows.Count; i++)
                        {
                            BranchChange objFCC = new BranchChange();

                            objFCC.NameAsPerMarksheet = (Convert.ToString(Dt.Rows[i]["NameAsPerMarksheet"])).IsEmpty() ? "Not Defined" : Convert.ToString(Dt.Rows[i]["NameAsPerMarksheet"]);
                            objFCC.ApplicationStatus = (Convert.ToString(Dt.Rows[i]["ApplicationStatus"])).IsEmpty() ? "Not Defined" : Convert.ToString(Dt.Rows[i]["ApplicationStatus"]);
                            objFCC.FacultyName = (Convert.ToString(Dt.Rows[i]["FacultyName"])).IsEmpty() ? "Not Defined" : Convert.ToString(Dt.Rows[i]["FacultyName"]);
                            objFCC.ProgrammeName = (Convert.ToString(Dt.Rows[i]["ProgrammeName"])).IsEmpty() ? "Not Defined" : Convert.ToString(Dt.Rows[i]["ProgrammeName"]);
                            objFCC.BranchName = (Convert.ToString(Dt.Rows[i]["BranchName"])).IsEmpty() ? "Not Defined" : Convert.ToString(Dt.Rows[i]["BranchName"]);
                            objFCC.InstancePartTermName = (Convert.ToString(Dt.Rows[i]["InstancePartTermName"])).IsEmpty() ? "Not Defined" : Convert.ToString(Dt.Rows[i]["InstancePartTermName"]);
                            objFCC.EligibilityStatus = (Convert.ToString(Dt.Rows[i]["EligibilityStatus"])).IsEmpty() ? "Not Defined" : Convert.ToString(Dt.Rows[i]["EligibilityStatus"]);
                            objFCC.FeeCategoryName = (Convert.ToString(Dt.Rows[i]["FeeCategoryName"])).IsEmpty() ? "Not Defined" : Convert.ToString(Dt.Rows[i]["FeeCategoryName"]);
                            objFCC.TotalAmount = (((Dt.Rows[i]["TotalAmount"]).ToString()).IsEmpty()) ? 0 : Convert.ToDouble(Dt.Rows[i]["TotalAmount"]);
                            objFCC.AmountPaid = (((Dt.Rows[i]["AmountPaid"]).ToString()).IsEmpty()) ? 0 : Convert.ToDouble(Dt.Rows[i]["AmountPaid"]);
                            objFCC.IsVerificationSms = (Convert.ToString(Dt.Rows[i]["IsVerificationSms"])).IsEmpty() ? false : Convert.ToBoolean(Dt.Rows[i]["IsVerificationSms"]);
                            objFCC.IsVerificationEmail = (Convert.ToString(Dt.Rows[i]["IsVerificationEmail"])).IsEmpty() ? false : Convert.ToBoolean(Dt.Rows[i]["IsVerificationEmail"]);
                            objFCC.FeeCategoryPartTermMapId = (((Dt.Rows[i]["FeeCategoryPartTermMapId"]).ToString()).IsEmpty()) ? 0 : Convert.ToInt64(Dt.Rows[i]["FeeCategoryPartTermMapId"]);
                            objFCC.DestinationIncProgInstPartTermId = (((Dt.Rows[i]["DestinationIncProgInstPartTermId"]).ToString()).IsEmpty()) ? 0 : Convert.ToInt64(Dt.Rows[i]["DestinationIncProgInstPartTermId"]);
                            objFCC.InstituteName = (Convert.ToString(Dt.Rows[i]["InstituteName"])).IsEmpty() ? "Not Defined" : Convert.ToString(Dt.Rows[i]["InstituteName"]);
                            objFCC.GroupName = (Convert.ToString(Dt.Rows[i]["GroupName"])).IsEmpty() ? "Not Defined" : Convert.ToString(Dt.Rows[i]["GroupName"]);
                            objFCC.IsPRNGenerated = (Convert.ToString(Dt.Rows[i]["IsPRNGenerated"])).IsEmpty() ? false : Convert.ToBoolean(Dt.Rows[i]["IsPRNGenerated"]);
                            objFCC.IsAdmissionFeePaid = (Convert.ToString(Dt.Rows[i]["IsAdmissionFeePaid"])).IsEmpty() ? false : Convert.ToBoolean(Dt.Rows[i]["IsAdmissionFeePaid"]);
                            objFCC.FeeCategoryId = (((Dt.Rows[i]["FeeCategoryId"]).ToString()).IsEmpty()) ? 0 : Convert.ToInt32(Dt.Rows[i]["FeeCategoryId"]);
                            objFCC.ApplicationId = (((Dt.Rows[i]["ApplicationId"]).ToString()).IsEmpty()) ? 0 : Convert.ToInt64(Dt.Rows[i]["ApplicationId"]);
                            var IsVerificationEmailOn = Dt.Rows[i]["IsVerificationEmailOn"];
                            if (IsVerificationEmailOn is DBNull) { objFCC.IsVerificationEmailOnView = "Email Not Sent"; }
                            else
                            {
                                objFCC.IsVerificationEmailOn = Convert.ToDateTime(Dt.Rows[i]["IsVerificationEmailOn"]);
                                //objFCC.IsVerificationEmailOnView = string.Format("{0: dd-MM-yyyy}", (Dt.Rows[i]["IsVerificationEmailOn"]));
                                objFCC.IsVerificationEmailOnView = Convert.ToString(Dt.Rows[i]["IsVerificationEmailOn"]);
                            }
                            var IsVerificationSmsOn = Dt.Rows[i]["IsVerificationSmsOn"];
                            if (IsVerificationSmsOn is DBNull) { objFCC.IsVerificationSmsOnView = "Sms Not Sent"; }
                            else
                            {
                                objFCC.IsVerificationSmsOn = Convert.ToDateTime(Dt.Rows[i]["IsVerificationSmsOn"]);
                                //objFCC.IsVerificationSmsOnView = string.Format("{0: dd-MM-yyyy}", (Dt.Rows[i]["IsVerificationSmsOn"]));
                                objFCC.IsVerificationSmsOnView = Convert.ToString(Dt.Rows[i]["IsVerificationSmsOn"]);
                            }


                            ObjLstFCC.Add(objFCC);
                        }
                        if (ObjLstFCC[0].EligibilityStatus == "Provisionally_Approved")
                        {
                            return Return.returnHttp("200", ObjLstFCC, null);
                        }
                        else
                        {
                            return Return.returnHttp("201", "As Application is not approved by faculty you are not able to change branch of this applicant.", null);
                        }
                    }
                    else
                    {
                        return Return.returnHttp("201", "This Application Number is not belongs to faculty.", null);
                    }
                }
                else
                {
                    return Return.returnHttp("201", "This is not Faculty Login, You can not change Fee Category.", null);
                }
            }
            catch (Exception e)
            {
                return Return.returnHttp("201", e.Message, null);
            }
        }
        #endregion

        #region Get New Branch List
        [HttpPost]
        public HttpResponseMessage GetNewBranchList(BranchChange FCC)
        {
            try
            {
                String token = Request.Headers.GetValues("token").FirstOrDefault();
                String userRoleToken = Request.Headers.GetValues("userRoleToken").FirstOrDefault();
                TokenOperation ac = new TokenOperation();
                string res = ac.ValidateToken(token);
                string resRoleToken = ac.ValidateRoleToken(userRoleToken);

                if (res == "0")
                {
                    return Return.returnHttp("0", null, null);
                }
                else if (resRoleToken == "0")
                {
                    return Return.returnHttp("0", null, null);
                }
                Int64 DestinationIncProgInstPartTermId = Convert.ToInt64(FCC.DestinationIncProgInstPartTermId);

                SqlCommand Cmd = new SqlCommand("NewBranchGet", Con);
                Cmd.CommandType = CommandType.StoredProcedure;

                Cmd.Parameters.AddWithValue("@ProgrammeInstancePartTermId", DestinationIncProgInstPartTermId);
                
                Da.SelectCommand = Cmd;
                Da.Fill(Dt);

                List<BranchChange> ObjLstFCC = new List<BranchChange>();

                if (Dt.Rows.Count > 0)
                {
                    for (int i = 0; i < Dt.Rows.Count; i++)
                    {
                        BranchChange objFCC = new BranchChange();

                        objFCC.BranchName = (Convert.ToString(Dt.Rows[i]["BranchName"])).IsEmpty() ? "Not Defined" : Convert.ToString(Dt.Rows[i]["BranchName"]);
                        objFCC.DestinationIncProgInstPartTermId = (((Dt.Rows[i]["Id"]).ToString()).IsEmpty()) ? 0 : Convert.ToInt64(Dt.Rows[i]["Id"]);
                        objFCC.SpecialisationId = (((Dt.Rows[i]["SpecialisationId"]).ToString()).IsEmpty()) ? 0 : Convert.ToInt32(Dt.Rows[i]["SpecialisationId"]);

                        ObjLstFCC.Add(objFCC);
                    }
                }
                return Return.returnHttp("200", ObjLstFCC, null);
            }
            catch (Exception e)
            {
                return Return.returnHttp("201", e.Message, null);
            }
        }
        #endregion
        #region Get New FeeCategory List
        [HttpPost]
        public HttpResponseMessage GetNewFeeCategoryList(BranchChange FCC)
        {
            try
            {
                String token = Request.Headers.GetValues("token").FirstOrDefault();
                String userRoleToken = Request.Headers.GetValues("userRoleToken").FirstOrDefault();
                TokenOperation ac = new TokenOperation();
                string res = ac.ValidateToken(token);
                string resRoleToken = ac.ValidateRoleToken(userRoleToken);

                if (res == "0")
                {
                    return Return.returnHttp("0", null, null);
                }
                else if (resRoleToken == "0")
                {
                    return Return.returnHttp("0", null, null);
                }
                Int64 DestinationIncProgInstPartTermId = Convert.ToInt64(FCC.DestinationIncProgInstPartTermId);
                Int64 FeeCategoryId = Convert.ToInt32(FCC.FeeCategoryId);

                SqlCommand Cmd = new SqlCommand("NewFeeCategoryGetforBranchChange", Con);
                Cmd.CommandType = CommandType.StoredProcedure;

                Cmd.Parameters.AddWithValue("@ProgrammeInstancePartTermId", DestinationIncProgInstPartTermId);
                Cmd.Parameters.AddWithValue("@FeeCategoryId", FeeCategoryId);

                Da.SelectCommand = Cmd;
                Da.Fill(Dt);

                List<BranchChange> ObjLstFCC = new List<BranchChange>();

                if (Dt.Rows.Count > 0)
                {
                    for (int i = 0; i < Dt.Rows.Count; i++)
                    {
                        BranchChange objFCC = new BranchChange();

                        objFCC.FeeCategoryName = (Convert.ToString(Dt.Rows[i]["FeeCategoryName"])).IsEmpty() ? "Not Defined" : Convert.ToString(Dt.Rows[i]["FeeCategoryName"]);
                        objFCC.FeeCategoryPartTermMapId = (((Dt.Rows[i]["FeeCategoryPartTermMapId"]).ToString()).IsEmpty()) ? 0 : Convert.ToInt64(Dt.Rows[i]["FeeCategoryPartTermMapId"]);
                        objFCC.FeeCategoryId = (((Dt.Rows[i]["FeeCategoryId"]).ToString()).IsEmpty()) ? 0 : Convert.ToInt32(Dt.Rows[i]["FeeCategoryId"]);

                        ObjLstFCC.Add(objFCC);
                    }
                }
                return Return.returnHttp("200", ObjLstFCC, null);
            }
            catch (Exception e)
            {
                return Return.returnHttp("201", e.Message, null);
            }
        }
        #endregion

        #region GenericConfigurationGetById
        [HttpPost]
        public HttpResponseMessage GenericConfigurationGetById(JObject jid)
        {
            try
            {
                SqlConnection con = new SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings["MSUISConnectionString"].ConnectionString);
                SqlCommand cmd = new SqlCommand();
                SqlDataAdapter da = new SqlDataAdapter();
                DataTable dt = new DataTable();
                DataSet ds = new DataSet();
                //List<GenMaritalStatus> slist = new List<GenMaritalStatus>();



                GenericConfiguration generic = new GenericConfiguration();
                dynamic JsonData = jid;
                generic.Id = Convert.ToInt16(JsonData.Id);
                //generic.KeyName = Convert.ToString(JsonData.KeyName);
                SqlCommand Cmd = new SqlCommand("GenericConfigurationGetById", con);
                Cmd.CommandType = CommandType.StoredProcedure;



                Cmd.Parameters.AddWithValue("@Id", generic.Id);
                //Cmd.Parameters.AddWithValue("@KeyName", generic.KeyName);



                da.SelectCommand = Cmd;
                da.Fill(dt);



                List<GenericConfiguration> ObjLstGenConfig = new List<GenericConfiguration>();



                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        GenericConfiguration objGenConfig = new GenericConfiguration();



                        objGenConfig.Id = Convert.ToInt32(dt.Rows[i]["Id"]);
                        objGenConfig.KeyName = Convert.ToString(dt.Rows[i]["KeyName"]);
                        objGenConfig.Value = Convert.ToString(dt.Rows[i]["Value"]);
                        //objGenConfig.IsActive = Convert.ToBoolean(Dt.Rows[i]["IsActive"]);
                        ObjLstGenConfig.Add(objGenConfig);
                    }
                }
                return Return.returnHttp("200", ObjLstGenConfig, null);
            }
            catch (Exception e)
            {
                return Return.returnHttp("201", e.Message, null);
            }
        }
        #endregion

        #region RTGS Document Upload
        [HttpPost()]
        public HttpResponseMessage UploadRTGSForm()
        {

            int iUploadedCnt = 0;

            // DEFINE THE PATH WHERE WE WANT TO SAVE THE FILES.
            string sPath = "";
            Boolean already_exist = false;
            sPath = System.Web.Hosting.HostingEnvironment.MapPath("~/Upload/BranchChangeRefundRTGSform/");


            string token = Request.Headers.GetValues("token").FirstOrDefault();
            TokenOperation tokenOperation = new TokenOperation();
            string responseToken = tokenOperation.ValidateToken(token);
            if (responseToken == "0")
            {
                return Return.returnHttp("0", null, null);
            }

            string abc = Request.Headers.GetValues("RTGSForm").FirstOrDefault();

            System.Web.HttpFileCollection hfc = System.Web.HttpContext.Current.Request.Files;

            // CHECK THE FILE COUNT.
            for (int iCnt = 0; iCnt <= hfc.Count - 1; iCnt++)
            {
                System.Web.HttpPostedFile hpf = hfc[iCnt];

                if (hpf.ContentLength > 0)
                {
                    /* if (abc == "EWS.pdf" || abc == "EWS.docx")
                    {
                    File.Delete(sPath + Path.GetFileName(responseToken + "_" + "EWS.pdf"));
                    File.Delete(sPath + Path.GetFileName(responseToken + "_" + "EWS.docx"));
                    }*/
                    if (File.Exists(sPath + Path.GetFileName(responseToken + "_" + abc)))
                    {
                        File.Delete(sPath + Path.GetFileName(responseToken + "_" + abc));
                    }


                    // SAVE THE FILES IN THE FOLDER.
                    hpf.SaveAs(sPath + Path.GetFileName(responseToken + "_" + abc));
                    //hpf.SaveAs(sPath + Path.GetFileName(abc));

                    iUploadedCnt = iUploadedCnt + 1;

                }
            }

            // RETURN A MESSAGE (OPTIONAL).
            if (iUploadedCnt > 0)
            {
                return Return.returnHttp("200", iUploadedCnt + " Files Uploaded Successfully", null);

            }
            else
            {
                return Return.returnHttp("201", iUploadedCnt + "Upload Failed", null);
            }

        }
        #endregion
        #region Passbook Photo Upload

        [HttpPost()]
        public HttpResponseMessage UploadPassbookPhoto()
        {

            int iUploadedCnt = 0;

            // DEFINE THE PATH WHERE WE WANT TO SAVE THE FILES.
            string sPath = "";
            Boolean already_exist = false;
            sPath = System.Web.Hosting.HostingEnvironment.MapPath("~/Upload/BranchChangePassbook/");


            string token = Request.Headers.GetValues("token").FirstOrDefault();
            TokenOperation tokenOperation = new TokenOperation();
            string responseToken = tokenOperation.ValidateToken(token);
            if (responseToken == "0")
            {
                return Return.returnHttp("0", null, null);
            }

            string abc = Request.Headers.GetValues("PassbookDoc").FirstOrDefault();

            System.Web.HttpFileCollection hfc = System.Web.HttpContext.Current.Request.Files;

            // CHECK THE FILE COUNT.
            for (int iCnt = 0; iCnt <= hfc.Count - 1; iCnt++)
            {
                System.Web.HttpPostedFile hpf = hfc[iCnt];

                if (hpf.ContentLength > 0)
                {
                    /* if (abc == "EWS.pdf" || abc == "EWS.docx")
                    {
                    File.Delete(sPath + Path.GetFileName(responseToken + "_" + "EWS.pdf"));
                    File.Delete(sPath + Path.GetFileName(responseToken + "_" + "EWS.docx"));
                    }*/
                    if (File.Exists(sPath + Path.GetFileName(responseToken + "_" + abc)))
                    {
                        File.Delete(sPath + Path.GetFileName(responseToken + "_" + abc));
                    }


                    // SAVE THE FILES IN THE FOLDER.
                    hpf.SaveAs(sPath + Path.GetFileName(responseToken + "_" + abc));
                    //hpf.SaveAs(sPath + Path.GetFileName(abc));

                    iUploadedCnt = iUploadedCnt + 1;

                }
            }

            // RETURN A MESSAGE (OPTIONAL).
            if (iUploadedCnt > 0)
            {
                return Return.returnHttp("200", iUploadedCnt + " Files Uploaded Successfully", null);

            }
            else
            {
                return Return.returnHttp("201", iUploadedCnt + "Upload Failed", null);
            }

        }
        #endregion

        #region Save Change
        [HttpPost]
        public HttpResponseMessage SaveBranchChange(BranchChange BCR)
        {
            try
            {

                String token = Request.Headers.GetValues("token").FirstOrDefault();

                String typePrefix = Request.Headers.GetValues("typePrefix").FirstOrDefault();
                String facultyDepartIntituteId = Request.Headers.GetValues("facultyDepartIntituteId").FirstOrDefault();
                String userRoleToken = Request.Headers.GetValues("userRoleToken").FirstOrDefault();
                TokenOperation ac = new TokenOperation();
                string res = ac.ValidateToken(token);
                string resRoleToken = ac.ValidateRoleToken(userRoleToken);


                if (res == "0")
                {
                    return Return.returnHttp("0", null, null);
                }
                else if (resRoleToken == "0")
                {
                    return Return.returnHttp("0", null, null);
                }
                if (typePrefix == "INS")
                {
                    Int64 UserId = Convert.ToInt64(res.ToString());
                    Int64 DestinationIncProgInstPartTermId = Convert.ToInt64(BCR.DestinationIncProgInstPartTermId);
                    Int64 FeeCategoryPartTermMapId = Convert.ToInt64(BCR.FeeCategoryPartTermMapId);
                    Int64 ApplicationId = Convert.ToInt64(BCR.ApplicationId);
                    Boolean UserConfirmAfterFee = Convert.ToBoolean(BCR.UserConfirmAfterFee);
                    Boolean IsAdmissionFeePaid = Convert.ToBoolean(BCR.IsAdmissionFeePaid);
                    Boolean SameFeeCategory = Convert.ToBoolean(BCR.SameFeeCategory);
                    String BranchChangeRemark = Convert.ToString(BCR.BranchChangeRemark);
                    Boolean IsBOBAccount = Convert.ToBoolean(BCR.IsBOBAccount);
                    String AccountNumber = Convert.ToString(BCR.AccountNumber);
                    String AccountName = Convert.ToString(BCR.AccountName);
                    Int32 BankId = Convert.ToInt32(BCR.BankId);
                    String IFSCCode = Convert.ToString(BCR.IFSCCode);
                    String PassbookDoc = Convert.ToString(BCR.PassbookDoc);
                    String RTGSForm = Convert.ToString(BCR.RTGSForm);
                    String ShortIFSCCode = Convert.ToString(BCR.ShortIFSCCode);
                    SqlCommand Cmd = new SqlCommand();
                    if (IsAdmissionFeePaid == true)
                    {
                        if(UserConfirmAfterFee == true)
                        {
                            if (SameFeeCategory == true)
                            {
                                if (String.IsNullOrWhiteSpace(Convert.ToString(FeeCategoryPartTermMapId)) && SameFeeCategory == false)
                                {
                                    return Return.returnHttp("201", "Please select Fee Category.", null);
                                }
                                else if (String.IsNullOrEmpty(Convert.ToString(BranchChangeRemark)))
                                {
                                    return Return.returnHttp("201", "Please Add Branch Change Remark.", null);
                                }
                                else
                                {
                                    Cmd = new SqlCommand("AdmBranchChangeAddandUpdate", Con, ST);
                                    Cmd.CommandType = CommandType.StoredProcedure;
                                    Cmd.Parameters.AddWithValue("@FeeCategoryPartTermMapId", FeeCategoryPartTermMapId);
                                    Cmd.Parameters.AddWithValue("@ApplicationId", ApplicationId);
                                    Cmd.Parameters.AddWithValue("@IsAdmissionFeePaid", IsAdmissionFeePaid);
                                    Cmd.Parameters.AddWithValue("@UserConfirmAfterFee", UserConfirmAfterFee);
                                    Cmd.Parameters.AddWithValue("@SameFeeCategory", SameFeeCategory);
                                    Cmd.Parameters.AddWithValue("@ProgrammeInstancePartTermId", DestinationIncProgInstPartTermId);
                                    Cmd.Parameters.AddWithValue("@BranchChangeRemark", BranchChangeRemark);
                                    Cmd.Parameters.AddWithValue("@Flag", "Fee");
                                    Cmd.Parameters.AddWithValue("@IsBOBAccount", IsBOBAccount);
                                    Cmd.Parameters.AddWithValue("@AccountName", AccountName);
                                    Cmd.Parameters.AddWithValue("@AccountNumber", AccountNumber);
                                    Cmd.Parameters.AddWithValue("@BankId", BankId);
                                    Cmd.Parameters.AddWithValue("@IFSCCode", IFSCCode);
                                    Cmd.Parameters.AddWithValue("@PassbookDoc", PassbookDoc);
                                    Cmd.Parameters.AddWithValue("@RTGSForm", RTGSForm);
                                    Cmd.Parameters.AddWithValue("@UserId", UserId);
                                    Cmd.Parameters.AddWithValue("@UserTime", datetime);
                                    Cmd.Parameters.Add("@Message", SqlDbType.NVarChar, 500);
                                    Cmd.Parameters["@Message"].Direction = ParameterDirection.Output;
                                }
                            }
                            else
                            {
                                if (PassbookDoc == null)
                                {
                                    PassbookDoc = null;
                                }
                                else
                                {
                                    PassbookDoc = res + "_" + PassbookDoc;
                                }
                                if (RTGSForm == null)
                                {
                                    RTGSForm = null;
                                }
                                else
                                {
                                    RTGSForm = res + "_" + RTGSForm;
                                }

                                string sPath = "";
                                sPath = System.Web.Hosting.HostingEnvironment.MapPath("~/Upload/BranchChangePassbook/");
                                string abc = null;
                                if (Request.Headers.Contains("PassbookDoc") && (IsAdmissionFeePaid == true))
                                {
                                    abc = Request.Headers.GetValues("PassbookDoc").FirstOrDefault();
                                }
                                else
                                {
                                    return Return.returnHttp("201", "Passbook Document File Not Exists.", null);
                                }
                                string sPathRTGS = "";
                                sPathRTGS = System.Web.Hosting.HostingEnvironment.MapPath("~/Upload/BranchChangeRefundRTGSform/");
                                string abcRTGS = null;
                                if (Request.Headers.Contains("RTGSForm") && (IsAdmissionFeePaid == true))
                                {
                                    abcRTGS = Request.Headers.GetValues("RTGSForm").FirstOrDefault();
                                }
                                //else if(Request.Headers.Contains("RTGSForm") && (IsAdmissionFeePaid == true && ShortIFSCCode != "BARB0"))
                                //{
                                //    return Return.returnHttp("201", "RTGS Document File Not Exists.", null);
                                //}

                                if (!File.Exists(sPath + Path.GetFileName(res + "_" + abc)) && IsAdmissionFeePaid == true)
                                {
                                    return Return.returnHttp("201", "PassbookDoc File Not Exists.", null);
                                }
                                else if (!File.Exists(sPathRTGS + Path.GetFileName(res + "_" + abcRTGS)) && (IsAdmissionFeePaid == true && ShortIFSCCode != "BARB0"))
                                {
                                    return Return.returnHttp("201", "RTGS File Not Exists.", null);
                                }
                                else if (String.IsNullOrEmpty(Convert.ToString(AccountNumber)) && IsAdmissionFeePaid == true)
                                {
                                    return Return.returnHttp("201", "Please Add Account Number.", null);
                                }
                                else if (String.IsNullOrEmpty(Convert.ToString(AccountName)) && IsAdmissionFeePaid == true)
                                {
                                    return Return.returnHttp("201", "Please Add Account Name.", null);
                                }
                                else if (String.IsNullOrWhiteSpace(Convert.ToString(BankId)) && IsAdmissionFeePaid == true)
                                {
                                    return Return.returnHttp("201", "Please select BankId.", null);
                                }
                                else if (String.IsNullOrEmpty(Convert.ToString(IFSCCode)) && IsAdmissionFeePaid == true)
                                {
                                    return Return.returnHttp("201", "Please Add IFSC Code.", null);
                                }
                                else if (String.IsNullOrEmpty(Convert.ToString(PassbookDoc)) && IsAdmissionFeePaid == true)
                                {
                                    return Return.returnHttp("201", "Please Add Passbook Document.", null);
                                }
                                else if (String.IsNullOrWhiteSpace(Convert.ToString(FeeCategoryPartTermMapId)) && SameFeeCategory == false)
                                {
                                    return Return.returnHttp("201", "Please select Fee Category.", null);
                                }
                                else if (String.IsNullOrEmpty(Convert.ToString(BranchChangeRemark)))
                                {
                                    return Return.returnHttp("201", "Please Add Branch Change Remark.", null);
                                }
                                else
                                {
                                    Cmd = new SqlCommand("AdmBranchChangeAddandUpdate", Con, ST);
                                    Cmd.CommandType = CommandType.StoredProcedure;
                                    Cmd.Parameters.AddWithValue("@FeeCategoryPartTermMapId", FeeCategoryPartTermMapId);
                                    Cmd.Parameters.AddWithValue("@ApplicationId", ApplicationId);
                                    Cmd.Parameters.AddWithValue("@IsAdmissionFeePaid", IsAdmissionFeePaid);
                                    Cmd.Parameters.AddWithValue("@UserConfirmAfterFee", UserConfirmAfterFee);
                                    Cmd.Parameters.AddWithValue("@SameFeeCategory", SameFeeCategory);
                                    Cmd.Parameters.AddWithValue("@ProgrammeInstancePartTermId", DestinationIncProgInstPartTermId);
                                    Cmd.Parameters.AddWithValue("@BranchChangeRemark", BranchChangeRemark);
                                    Cmd.Parameters.AddWithValue("@Flag", "Fee");
                                    Cmd.Parameters.AddWithValue("@IsBOBAccount", IsBOBAccount);
                                    Cmd.Parameters.AddWithValue("@AccountName", AccountName);
                                    Cmd.Parameters.AddWithValue("@AccountNumber", AccountNumber);
                                    Cmd.Parameters.AddWithValue("@BankId", BankId);
                                    Cmd.Parameters.AddWithValue("@IFSCCode", IFSCCode);
                                    Cmd.Parameters.AddWithValue("@PassbookDoc", PassbookDoc);
                                    Cmd.Parameters.AddWithValue("@RTGSForm", RTGSForm);
                                    Cmd.Parameters.AddWithValue("@UserId", UserId);
                                    Cmd.Parameters.AddWithValue("@UserTime", datetime);
                                    Cmd.Parameters.Add("@Message", SqlDbType.NVarChar, 500);
                                    Cmd.Parameters["@Message"].Direction = ParameterDirection.Output;
                                }

                            }
                        }
                        else
                        {
                            return Return.returnHttp("201", "You Have Selected Not to Proceed.", null);
                        }
                    }
                    else
                    {
                        if (String.IsNullOrWhiteSpace(Convert.ToString(FeeCategoryPartTermMapId)) && SameFeeCategory == false)
                        {
                            return Return.returnHttp("201", "Please select Fee Category.", null);
                        }
                        else if (String.IsNullOrEmpty(Convert.ToString(BranchChangeRemark)))
                        {
                            return Return.returnHttp("201", "Please Add Branch Change Remark.", null);
                        }
                        else
                        {
                            Cmd = new SqlCommand("AdmBranchChangeAddandUpdate", Con, ST);
                            Cmd.CommandType = CommandType.StoredProcedure;
                            Cmd.Parameters.AddWithValue("@FeeCategoryPartTermMapId", FeeCategoryPartTermMapId);
                            Cmd.Parameters.AddWithValue("@ApplicationId", ApplicationId);
                            Cmd.Parameters.AddWithValue("@IsAdmissionFeePaid", IsAdmissionFeePaid);
                            Cmd.Parameters.AddWithValue("@UserConfirmAfterFee", UserConfirmAfterFee);
                            Cmd.Parameters.AddWithValue("@SameFeeCategory", SameFeeCategory);
                            Cmd.Parameters.AddWithValue("@ProgrammeInstancePartTermId", DestinationIncProgInstPartTermId);
                            Cmd.Parameters.AddWithValue("@BranchChangeRemark", BranchChangeRemark);
                            Cmd.Parameters.AddWithValue("@Flag", "Fee");
                            Cmd.Parameters.AddWithValue("@IsBOBAccount", IsBOBAccount);
                            Cmd.Parameters.AddWithValue("@AccountName", AccountName);
                            Cmd.Parameters.AddWithValue("@AccountNumber", AccountNumber);
                            Cmd.Parameters.AddWithValue("@BankId", BankId);
                            Cmd.Parameters.AddWithValue("@IFSCCode", IFSCCode);
                            Cmd.Parameters.AddWithValue("@PassbookDoc", PassbookDoc);
                            Cmd.Parameters.AddWithValue("@RTGSForm", RTGSForm);
                            Cmd.Parameters.AddWithValue("@UserId", UserId);
                            Cmd.Parameters.AddWithValue("@UserTime", datetime);
                            Cmd.Parameters.Add("@Message", SqlDbType.NVarChar, 500);
                            Cmd.Parameters["@Message"].Direction = ParameterDirection.Output;
                        }
                    }
                    Con.Open();
                    ST = Con.BeginTransaction();
                    try
                    {

                        Cmd.Transaction = ST;
                        int ans = Cmd.ExecuteNonQuery();
                        String msg = Convert.ToString(Cmd.Parameters["@Message"].Value);


                        ST.Commit();
                        return Return.returnHttp("200", msg, null);
                    }
                    catch (SqlException sqlError)
                    {
                        ST.Rollback();
                        String strMessageErr = Convert.ToString(sqlError);
                        return Return.returnHttp("201", strMessageErr, null);
                        //return Return.returnHttp("201", "Error", null);
                    }
                    finally
                    {
                        Con.Close();
                    }
                }
                else
                {
                    return Return.returnHttp("201", "This is not Faculty Login, You can not change Fee Category.", null);
                }


            }
            catch (Exception e)
            {
                return Return.returnHttp("201", e.Message, null);
            }

        }
        #endregion
    }
}